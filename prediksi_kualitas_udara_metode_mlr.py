# -*- coding: utf-8 -*-
"""Prediksi Kualitas Udara metode MLR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1guh39PcvmoxQqoK7daewGgj-PcHa_KAy

Prediksi Kualitas Udara Tahun 2004-2005 di Kota Italia dengan Multiple Linear Regression

---

Link dataset: https://archive.ics.uci.edu/dataset/360/air+quality

Mengimpor Data dan Library yang Dibutuhkan:
"""

#untuk import data dan pengolahannya
import pandas as pd
import numpy as np

#untuk grafik
import seaborn as sns
import matplotlib.pyplot as plt

#untuk menggunakan metode mlr
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

#untuk import data langsung dari webnya
import requests
import zipfile
import io

"""Menetapkan Nama Kolom:"""

# URL dari dataset Air Quality UCI
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00360/AirQualityUCI.zip'

# Mengunduh file zip
response = requests.get(url)
z = zipfile.ZipFile(io.BytesIO(response.content))

# Menampilkan daftar file dalam zip
print(z.namelist())

# Membaca file Excel dari zip (sesuaikan dengan nama file yang benar dalam zip)
columns = ["Date", "Time", "CO", "PT08.S1", "NMHC", "Benzene", "PT08.S2", "NOx",
           "PT08.S3", "NO2", "PT08.S4", "PT08.S5", "Temperature", "RH", "AH"]
df = pd.read_excel(z.open('AirQualityUCI.xlsx'), names=columns)
df_old = df

# Menampilkan 5 baris pertama dari dataset
print(df.head())

"""# Feature Engineering (Hour, DayOfWeek, Month):"""

# Konversi kolom Date dan Time menjadi tipe data datetime
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
df['Time'] = pd.to_datetime(df['Time'], format='%H:%M:%S').dt.time

# Menggabungkan kolom Date dan Time menjadi satu kolom datetime
df['Datetime'] = pd.to_datetime(df['Date'].astype(str) + ' ' + df['Time'].astype(str))

# Menghapus kolom Date dan Time
df = df.drop(['Date', 'Time'], axis=1)

# Menjadikan 'Datetime' sebagai index
df.set_index('Datetime', inplace=True)

# Menambahkan fitur tambahan dari datetime
df['Hour'] = df.index.hour
df['DayOfWeek'] = df.index.dayofweek
df['Month'] = df.index.month
df_old2 = df

"""# Menangani Missing Values

Mengganti Missing Values (-200) dengan NaN:
"""

# Mengganti nilai -200 dengan NaN
df.replace(-200, np.nan, inplace=True)

"""Memeriksa Missing Values:"""

# Menampilkan informasi umum tentang DataFrame
print("Informasi DataFrame:")
print(df.info())

# Jumlah missing values di setiap kolom
print("\nJumlah missing values di setiap kolom:")
print(df.isnull().sum())

# Menampilkan baris yang memiliki missing values
missing_rows = df[df.isnull().any(axis=1)]
print("\nBaris yang memiliki missing values:")
print(missing_rows)

"""Mengisi Missing Values dengan Nilai Lain:"""

# Mengisi missing values dengan nilai rata-rata dari setiap kolom
df_filled = df.fillna(df.mean())
print("\nDataFrame setelah mengisi missing values dengan nilai rata-rata:")
print(df_filled.info())
df = df_filled

df

"""# Exploratory Data Analysis (EDA):"""

from matplotlib import pyplot as plt

# Membuat plot garis untuk data CO menggunakan index datetime
plt.figure(figsize=(8, 4))
plt.plot(df.index, df['CO'], label='Konsentrasi CO', color='blue')

# Menambahkan judul dan label sumbu
plt.title('Konsentrasi CO periode 2004-2005')
plt.xlabel('Tahun-bulan')
plt.ylabel('Konsentrasi CO (mg/mÂ³)')

# Menambahkan grid dan legenda
plt.grid(True)
plt.legend()

# Menampilkan plot
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()

"""Sebelum missing data ditangani:"""

# Distribusi harga CO (variabel target)
plt.figure(figsize=(8, 4))
sns.histplot(df_old2['CO'], bins=30, kde=True)
plt.title('Distribusi konsentrasi CO (mg/m^3)')
plt.show()

"""Sesudah missing data ditangani:"""

# Distribusi harga CO (variabel target)
plt.figure(figsize=(8, 4))
sns.histplot(df['CO'], bins=30, kde=True)
plt.title('Distribusi konsentrasi CO (mg/m^3) dengan missing data = rata-rata')
plt.show()

"""# Regresi Linier Berganda (Multiple Linear Regression):"""

# y = variabel dependen
y = df["CO"]
# X = variabel independen
X = df.drop(["CO"], axis=1)

y

X

"""# Prediksi 20% Data"""

# Untuk 200 data (1000 x 0.2 = 200 di test_size-0.2)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)

linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
y_predict = linear_model.predict(X_test)
pd.DataFrame(linear_model.coef_,X.columns,columns=['Coefficient'])

y_predict

print('MAE:', metrics.mean_absolute_error(y_test, y_predict))
print('MSE:', metrics.mean_squared_error(y_test, y_predict))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_predict)))

"""Membuat Data Prediksi CO"""

new = pd.DataFrame(y_predict, columns=['prediksi'])
new

"""# Prediksi Seluruh Data"""

linear_model = LinearRegression()
linear_model.fit(X,y)
y_predictnew = linear_model.predict(X)
pd.DataFrame(linear_model.coef_,X.columns,columns=['Coefficient'])

print('MAE:', metrics.mean_absolute_error(y, y_predictnew))
print('MSE:', metrics.mean_squared_error(y, y_predictnew))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y, y_predictnew)))
MAE_forPercent = metrics.mean_absolute_error(y, y_predictnew)

new_all = pd.DataFrame(y_predictnew, columns=['prediksi'])
new_all

print(len(df))        # Panjang DataFrame df
print(len(new_all))   # Panjang DataFrame new_all

df_reset = df.reset_index(drop=True)
new_all_reset = new_all.reset_index(drop=True)

prediksi_semua = pd.concat([df_reset, new_all_reset], axis=1)
prediksi_semua.index = df_old2.index
print(prediksi_semua)

prediksi_semua

# Plot scatter plot
ax = prediksi_semua.plot(kind='scatter', x='CO', y='prediksi', s=32, alpha=.8)

# Get the current limits of the plot
xlim = ax.get_xlim()
ylim = ax.get_ylim()

# Determine the min and max range for the line
line_start = min(xlim[0], ylim[0])
line_end = max(xlim[1], ylim[1])

# Plot the y=x line
ax.plot([line_start, line_end], [line_start, line_end], color='red', linestyle='--')

# Set the limits back to what they were
ax.set_xlim(xlim)
ax.set_ylim(ylim)

# Hide the top and right spines
ax.spines[['top', 'right']].set_visible(False)

# Add title to the plot
plt.title('Perbandingan CO Aktual dan Prediksi CO')

# Grid
plt.grid(True)

plt.show()

"""Export csv tanpa index (datetime):"""

# Menggunakan nama file 'prediksi_semua.csv', sesuaikan dengan nama yang di inginkan
file_path_prediksi_semua_csv = 'prediksi_semua.csv'

# Menyimpan DataFrame ke file CSV
prediksi_semua.to_csv(file_path_prediksi_semua_csv, index=False)

print(f'DataFrame "prediksi_semua" berhasil diekspor ke: {file_path_prediksi_semua_csv}')

"""Export csv & excel dengan index (datetime):"""

# Menggunakan nama file 'prediksi_semua.csv', sesuaikan dengan nama yang di inginkan
file_path_prediksi_semua_index_csv = 'prediksi_semua_index.csv'

# Menyimpan DataFrame ke file CSV
prediksi_semua.to_csv(file_path_prediksi_semua_index_csv, index=True)

print(f'DataFrame "prediksi_semua_index" berhasil diekspor ke: {file_path_prediksi_semua_index_csv}')

# Menggunakan nama file 'prediksi_semua.xlsx', sesuaikan dengan nama yang diinginkan
file_path_prediksi_semua_index_xlsx = 'prediksi_semua_index.xlsx'

# Menyimpan DataFrame ke file XLSX
prediksi_semua.to_excel(file_path_prediksi_semua_index_xlsx, index=True)

print(f'DataFrame "prediksi_semua_index" berhasil diekspor ke: {file_path_prediksi_semua_index_xlsx}')

"""Menghitung nilai persen MAE:"""

# Misalkan variabel dependent Anda bernama 'CO'
rata_rata_CO = df['CO'].mean()

# Menampilkan hasil
print(f"Rata-rata CO: {rata_rata_CO}")

# Menghitung MAE sebagai persentase dari rata-rata variabel dependent
MAE_percentage = (MAE_forPercent / rata_rata_CO) * 100

# Menampilkan hasil
print(f"Mean Absolute Error (MAE) sebagai persentase dari rata-rata variabel dependent: {MAE_percentage:.2f}%")

# Menentukan kategori akurasi
if MAE_percentage < 10:
    print("Nilai < 10% = Peramalan Sangat Akurat")
elif 10 <= MAE_percentage < 20:
    print("Nilai 10% - 20% = Peramalan Akurat")
elif 20 <= MAE_percentage < 50:
    print("Nilai 20% - 50% = Peramalan Cukup Akurat")
else:

    print("Nilai > 50% = Peramalan Tidak Akurat")